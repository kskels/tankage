===----------------------------------------------------------------*- org -*-===
                                      TODO
===--------------------------------------------------------------------------===

* TODO Add doxygen comments for engine interfaces
* TODO SDL support
* TODO ImageIO support
* TODO SDL_image support
* DONE Smoke trails for bullets   
* TODO System profile
* DONE New game folder structure (common, client, server)
* DONE Add "error dialog box" to window managers, for displaying errors.
* TODO Verify that the server compiles, runs and accepts connections on PowerPC
* TODO A directory for cached downloaded data, writable by the client
* DONE Add twitcurl library in 3pp and make it compilable * Logging
** DONE A logging interface in the engine (+ very basic stdout/stderr implementation)  
** TODO Implement logging level (probably some environment variable)
** TODO Update std::cout to use log interface
** DONE Implement AUDIT or TWITTER LogType
* "Sprint" planning
** 2011-02-20: "Tanks Communicate"
*** DoD: driving around on server together with other tanks and shooting 
*** DONE Connect to server, get a tank
*** DONE Replicate tanks over server
*** DONE Replicate user input to server
*** TODO Replicate projectiles
*** TODO Improve network smoothness     
** --: "Tanks are Dangerous..."
*** DoD: kill other tanks, collide with terrain and other tanks
** --: "... and Powerful!"
*** DoD: destroy terrain
** --: "It matters what I do"
*** DoD: tanks and terrain drop score, store score permanently on server
** --: "And whom I play with"
*** DoD: team games can be scripted
* Network
** TODO Replicate tanks
** TODO Add some more replicated systems, bullets/projectiles
** TODO Replicate player input to the server
** TODO Player events (player was hurt, player picked up item, player died)
* Configuration Management
** DONE Add Peter's configuration library and fix CMake 
** DONE Basic stuff, read from file, get, add and update properties
** DONE Support for CM consumers, triggered when properties are updated
** Each system can expose variables which the administrator can configure (during runtime and before)
** TODO Integrate CM in the game
** DONE Move CM to the engine
** TODO Add support for configuring over the network
** DONE Support to override cfg via command line arguments
** TODO Support for writing configuration to file
* Recover old behavior
*** DONE Cactii
*** DONE Shooting
*** DONE Items
*** DONE Collision detection
*** DONE Collision response    
*** TODO Health + healthbar
*** TODO The rockets    
*** TODO Particle system
*** DONE TextureLoader
* Performance
** TODO Use drawQuads instead of drawQuad
** TODO Find out why game takes 60% of 2GHz duo core processor resources
* Unit tests using Gtest
*** DONE Unittests for mat, vec, rect in utils
* CMake support
*** DONE CMake should create and use 'bin' and 'build' directories 
*** TODO Investigate how-to report CMake error and get rid of gen files
*** DONE Investigate how-to create debian packages and which tool to use
*** DONE Add CMake find module for Google C++ Testing Framework 
*** TODO Make CMake output more pretty for the smart ptr detection
*** DONE Make GTest targets optional 
*** DONE Figure out how to create folders with debian package. Sort of weird
         generator because make install succeeds but not in the package
         (added kind a hack with preinst and postrm scripts)
*** DONE Find out a way to change install prefix for debian package. Default
         variable CMAKE_INSTALL_PREFIX doesn't work for some reason. Again,
         default make install works but in the package it's lost
         (you are not suppose to change path in the ready made package)
*** DONE List and configure Ubuntu dependencies for debian package
*** DONE Add resource path define in config.h.in and build/CMakeLists.txt 
*** DONE Update code to use resource path
*** DONE Add support for other CPack generators, like Bundle
**** DONE Investigate if a CPack generator can be picked by default, so we support package generation on all platforms CPack supports
*** DONE DEV-flag should set -g flag when using gcc (but not when using Visual Studio)
*** TODO Move engine CMake rules specific for the platform to different files;
    Windows.cmake, MacOSX.cmake, Android.cmake, etc. Only for the engine and
    should specify which files to compile with (and which external libraries)
*** DONE Add CMake module to find cURL library
* Android support
*** TODO CMake
*** TODO Window Manager support
*** TODO OpenGLES
*** TODO Image Loader    
*** TODO Input    
* Memory leaks and other Valgrind gibberish
** TODO Only one remarkable memory leak left
	==11268== 4,152 (2,072 direct, 2,080 indirect) bytes in 1 blocks are definitely lost in loss record 30 of 30
	==11268==    at 0x4025BD3: malloc (vg_replace_malloc.c:236)
	==11268==    by 0x40FD9CD: ??? (in /usr/lib/mesa/libGL.so.1.2)
	==11268==    by 0x40FDE01: ??? (in /usr/lib/mesa/libGL.so.1.2)
	==11268==    by 0x40D9285: ??? (in /usr/lib/mesa/libGL.so.1.2)
	==11268==    by 0x40D5F79: ??? (in /usr/lib/mesa/libGL.so.1.2)
	==11268==    by 0x40D6B47: glXGetConfig (in /usr/lib/mesa/libGL.so.1.2)
	==11268==    by 0x404E121: _glfwChooseVisual (in /usr/lib/libglfw.so.2.6)
	==11268==    by 0x404E609: _glfwPlatformOpenWindow (in /usr/lib/libglfw.so.2.6)
	==11268==    by 0x404B3BF: glfwOpenWindow (in /usr/lib/libglfw.so.2.6)
	==11268==    by 0x8067CED: Glfw::WindowManager::createWindow(int, int) (wm.cpp:32)
	==11268==    by 0x805A99A: app_main(Portal&) (main.cpp:22)
	==11268==    by 0x8065963: main (starter.cpp:38)
* ENet library
*** WORKING Add CMake find module
*** DONE Implement network interface using Enet
*** Add more statistics data points for Client::stats()
    http://enet.bespin.org/struct__ENetPeer.html
* Windows support
** TODO Message boxes in Windows for displaying errors   
* Mac OS X support
** TODO Fix a proper icon for the OS X bundle   
* Linux support
** TODO Add the icon for Linux as well 

